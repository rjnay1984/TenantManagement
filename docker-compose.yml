version: "3.1"

services:
  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: postgres

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  identity:
    build:
      context: .
      dockerfile: backend/src/Identity/Dockerfile
    depends_on:
      - db
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    ports:
      - 5001:80
      - 5002:443
    command: dotnet run --no-build --no-launch-profile -c Debug

  api:
    build:
      context: .
      dockerfile: backend/src/API/Dockerfile
    depends_on:
      - identity
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    ports:
      - 5003:80
      - 5004:443
    command: dotnet run --no-build --no-launch-profile -c Debug

  client:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - ./frontend:/app
      - /frontend/node_modules
    depends_on:
      - identity
      - api
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 4200:4200
    command: npm start -- --host 0.0.0.0 --disable-host-check --poll 1 --port 4200
